@using System.IO
@using Sava.Service
@inject VoskService _voskService

<table class="table table-sm table-bordered">
    <thead class="thead-dark">
    <tr style="text-align: center">
        <th>Play</th>
        <th>Name</th>
        <th>DateTime</th>
        <th>Duration</th>
        <th>Contacts</th>
        <th>Recognition</th>
        <th>Delete</th>
    </tr>
    </thead>
    <tbody>

    @foreach (var audioFile in AudioFiles)
    {
        <tr style="text-align: center;">
            <td style="width: 350px;">
                @if (audioFile.Converted)
                {
                    <audio style="width: 300px;" controls src="@audioFile.ConvertedFile" preload="metadata"></audio>
                }
                else
                {
                    <audio style="width: 300px;" controls src="@audioFile.SourceFile" preload="metadata"></audio>
                }
            </td>
            <td>@audioFile.Name</td>
            <td>@audioFile.DateTime</td>
            <td>@audioFile.Duration</td>
            <td>@audioFile.Contacts</td>
            <td>
                @switch (audioFile.CurrentStatus)
                {
                    case RecognitionStatus.None:
                        <button class="btn btn-primary" @onclick="e => Recognize(audioFile)">Распознать</button>
                        break;
                    case RecognitionStatus.Execute:
                        <label>Распознается...</label>
                        <div class="spinner-border text-primary" role="status"></div>
                        <span class="visually-hidden"></span>
                        break;
                    case RecognitionStatus.Finish:
                        @if (audioFile.IsCollapsed)
                        {
                            <button class="btn btn-outline-success" 
                                    @onclick="e => audioFile.IsCollapsed = !audioFile.IsCollapsed">
                                    Результат <span class="oi oi-chevron-top"></span></button>
                        }
                        else
                        {
                            <button class="btn btn-outline-success" 
                                    @onclick="e => audioFile.IsCollapsed = !audioFile.IsCollapsed">
                                    Результат <span class="oi oi-chevron-bottom"></span></button>
                        }
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </td>
            <td>
                <button class="btn btn-danger btn-sm" @onclick="e => OpenDeleteDialog(audioFile)">
                    <span class="oi oi-delete"></span> Удалить
                </button>
            </td>
        </tr>
        if (audioFile.IsCollapsed)
        {
            <tr>
                <td colspan="7">
                    <RecognitionForm AudioFile="audioFile"></RecognitionForm>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@if (DeleteDialogOpen)
{
    <ModalDialog Title="Удаление" Text="@("Вы действительно хотите удалить файл " + TempAudioFileToDelete.Name + "?")"
                 OnClose="@OnDeleteDialogClose" DialogType="ModalDialog.ModalDialogType.DeleteCancel">
    </ModalDialog>
}

@* @if (OpenSpeechRecognitionResult) *@
@* { *@
@* <RecognitionForm Title="@("Результат распознания файла " + TempAudioFileRecognition.Name)" *@
@* TempAudioFile="@TempAudioFileRecognition" *@
@* OnClose="@OnSaveDialogClose"> *@
@* </RecognitionForm> *@
@* } *@


@code {

    [Parameter]
    public List<TempAudioFile> AudioFiles { get; set; }

    private bool DeleteDialogOpen { get; set; }

    private TempAudioFile TempAudioFileToDelete { get; set; }

        @*
        private bool OpenSpeechRecognitionResult { get; set; }
        private TempAudioFile TempAudioFileRecognition { get; set; }
        private void OnSaveDialogClose()
        {
        OpenSpeechRecognitionResult = false;
        StateHasChanged();
        }
        private void OpenSaveDialog(TempAudioFile tempAudioFile)
        {
        OpenSpeechRecognitionResult = true;
        TempAudioFileRecognition = tempAudioFile;
        StateHasChanged();
        } *@

    private void OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            DeleteAudio(TempAudioFileToDelete);
            TempAudioFileToDelete = null;
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(TempAudioFile tempAudioFile)
    {
        DeleteDialogOpen = true;
        TempAudioFileToDelete = tempAudioFile;
        StateHasChanged();
    }

    private void DeleteAudio(TempAudioFile tempAudioFile)
    {
        if (File.Exists("wwwroot/" + tempAudioFile.SourceFile))
            File.Delete("wwwroot/" + tempAudioFile.SourceFile);
        
        if(AudioFiles.Contains(tempAudioFile))
            AudioFiles.Remove(tempAudioFile);
    }

    private async Task Recognize(TempAudioFile audioFile)
    {
        audioFile.CurrentStatus = RecognitionStatus.Execute;

        audioFile.SourceResult = audioFile.Converted ?
            await _voskService.RecognizeAsync(Path.Combine("wwwroot", audioFile.ConvertedFile)) :
            await _voskService.RecognizeAsync(Path.Combine("wwwroot",audioFile.SourceFile));
        
        audioFile.CurrentStatus = RecognitionStatus.Finish;
    }
    
}